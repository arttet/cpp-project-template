name: Tests

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

env:
  build_folder: build
  build_script: build.sh
  cppstd: 17
  python-version: 3.9

jobs:
  linter:
    name: linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Clang format
        shell: bash
        run: |
          shopt -s expand_aliases
          alias git-clang-format="git-clang-format-12"
          linter_errors=$(git-clang-format --commit "HEAD~1" --diff -q || true)
          echo "$linter_errors"
          if [ ! -z "$linter_errors" ]; then echo "Detected formatting issues; please fix"; exit 1; else echo "Formatting is correct"; exit 0; fi

  build:
    needs: linter
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: Windows MSVC 2019 x86 64 Debug v142,
              os: windows-latest,
              compiler: Visual Studio,
              version: 16,
              cc: cl,
              cxx: cl,
              arch: x86_64,
              build_type: Debug,
              toolset: v142,
              runtime: MTd,
            }
          - {
              name: Windows MSVC 2019 x86 64 RelWithDebInfo v142,
              os: windows-latest,
              compiler: Visual Studio,
              version: 16,
              cc: cl,
              cxx: cl,
              arch: x86_64,
              build_type: RelWithDebInfo,
              toolset: v142,
              runtime: MT,
            }

          - {
              name: Windows MSVC 2019 ARM v8 Debug v142,
              os: windows-latest,
              compiler: Visual Studio,
              version: 16,
              cc: cl,
              cxx: cl,
              arch: armv8,
              build_type: Debug,
              toolset: v142,
              runtime: MTd,
            }
          - {
              name: Windows MSVC 2019 ARM v8 RelWithDebInfo v142,
              os: windows-latest,
              compiler: Visual Studio,
              version: 16,
              cc: cl,
              cxx: cl,
              arch: armv8,
              build_type: RelWithDebInfo,
              toolset: v142,
              runtime: MT,
            }

          # - {
          #     name: Windows MSVC 2019 x86 64 Debug ClangCL,
          #     os: windows-latest,
          #     compiler: Visual Studio,
          #     version: 16,
          #     cc: clang-cl,
          #     cxx: clang-cl,
          #     arch: x86_64,
          #     build_type: Debug,
          #     toolset: ClangCL,
          #     runtime: MTd,
          #   }
          # - {
          #     name: Windows MSVC 2019 x86 64 RelWithDebInfo ClangCL,
          #     os: windows-latest,
          #     compiler: Visual Studio,
          #     version: 16,
          #     cc: clang-cl,
          #     cxx: clang-cl,
          #     arch: x86_64,
          #     build_type: RelWithDebInfo,
          #     toolset: ClangCL,
          #     runtime: MT,
          #   }

          - {
              name: Windows Clang 12 x86 64 Debug,
              os: windows-latest,
              compiler: clang,
              version: 12,
              cc: 'C:/msys64/mingw64/bin/clang',
              cxx: 'C:/msys64/mingw64/bin/clang++',
              arch: x86_64,
              build_type: Debug,
              runtime: MTd,
            }

          - {
              name: Windows Clang 12 x86 64 RelWithDebInfo,
              os: windows-latest,
              compiler: clang,
              version: 12,
              cc: 'C:/msys64/mingw64/bin/clang',
              cxx: 'C:/msys64/mingw64/bin/clang++',
              arch: x86_64,
              build_type: RelWithDebInfo,
              runtime: MT,
            }

          - {
              name: Windows Clang 12 ARM v8 Debug,
              os: windows-latest,
              compiler: clang,
              version: 12,
              cc: 'C:/msys64/mingw64/bin/clang',
              cxx: 'C:/msys64/mingw64/bin/clang++',
              arch: armv8,
              build_type: Debug,
              runtime: MTd,
            }

          - {
              name: Windows Clang 12 ARM v8 RelWithDebInfo,
              os: windows-latest,
              compiler: clang,
              version: 12,
              cc: 'C:/msys64/mingw64/bin/clang',
              cxx: 'C:/msys64/mingw64/bin/clang++',
              arch: armv8,
              build_type: RelWithDebInfo,
              runtime: MT,
            }
          # Linux
          - {
              name: Ubuntu GCC 10 x86 64 Debug,
              os: ubuntu-latest,
              compiler: gcc,
              version: 10.3,
              cc: gcc-10,
              cxx: g++-10,
              arch: x86_64,
              build_type: Debug,
              coverage: True,
            }
          - {
              name: Ubuntu GCC 10 x86 64 RelWithDebInfo,
              os: ubuntu-latest,
              compiler: gcc,
              version: 10.3,
              cc: gcc-10,
              cxx: g++-10,
              arch: x86_64,
              build_type: RelWithDebInfo,
            }
          - {
              name: Ubuntu GCC 10 ARM v8 Debug,
              os: ubuntu-latest,
              compiler: gcc,
              version: 10.3,
              cc: gcc-10,
              cxx: g++-10,
              arch: armv8,
              build_type: Debug,
            }
          - {
              name: Ubuntu GCC 10 ARM v8 RelWithDebInfo,
              os: ubuntu-latest,
              compiler: gcc,
              version: 10.3,
              cc: gcc-10,
              cxx: g++-10,
              arch: armv8,
              build_type: RelWithDebInfo,
            }
          - {
              name: Ubuntu Clang 12 x86 64 Debug,
              os: ubuntu-latest,
              compiler: clang,
              version: 12.0,
              cc: clang-12,
              cxx: clang++-12,
              arch: x86_64,
              build_type: Debug,
            }
          - {
              name: Ubuntu Clang 12 x86 64 RelWithDebInfo,
              os: ubuntu-latest,
              compiler: clang,
              version: 12.0,
              cc: clang-12,
              cxx: clang++-12,
              arch: x86_64,
              build_type: RelWithDebInfo,
            }
          - {
              name: Ubuntu Clang 12 ARM v8 Debug,
              os: ubuntu-latest,
              compiler: clang,
              version: 12.0,
              cc: clang-12,
              cxx: clang++-12,
              arch: armv8,
              build_type: Debug,
            }
          - {
              name: Ubuntu Clang 12 ARM v8 RelWithDebInfo,
              os: ubuntu-latest,
              compiler: clang,
              version: 12.0,
              cc: clang-12,
              cxx: clang++-12,
              arch: armv8,
              build_type: RelWithDebInfo,
            }
            # maxOS
          - {
              name: macOS Apple Clang x86 64 Debug,
              os: macos-latest,
              compiler: apple-clang,
              version: '12.0',
              cc: clang,
              cxx: clang++,
              arch: x86_64,
              build_type: Debug,
            }
          - {
              name: macOS Apple Clang x86 64 RelWithDebInfo,
              os: macos-latest,
              compiler: apple-clang,
              version: '12.0',
              cc: clang,
              cxx: clang++,
              arch: x86_64,
              build_type: RelWithDebInfo,
            }
          - {
              name: macOS Apple Clang ARM v8 Debug,
              os: macos-latest,
              compiler: apple-clang,
              version: '12.0',
              cc: clang,
              cxx: clang++,
              arch: armv8,
              build_type: Debug,
            }
          - {
              name: macOS Apple Clang ARM v8 RelWithDebInfo,
              os: macos-latest,
              compiler: apple-clang,
              version: '12.0',
              cc: clang,
              cxx: clang++,
              arch: armv8,
              build_type: RelWithDebInfo,
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade conan

      - name: Install dependencies
        shell: bash
        run: |
          install="conan install . \
          --install-folder ${{ env.build_folder }} \
          --build=outdated \
          -s arch_target=${{ matrix.config.arch }} \
          -s build_type=${{ matrix.config.build_type }} \
          -s compiler.cppstd=${{ env.cppstd }} \
          -s compiler.version=${{ matrix.config.version }} "

          if [ "${{ matrix.config.compiler }}" == "Visual Studio" ]; then
            install+="-s compiler=\"${{ matrix.config.compiler }}\" "
            install+="-s compiler.toolset=${{ matrix.config.toolset }} "
          elif [ "${{ matrix.config.compiler }}" == "apple-clang" ]; then
            install+="-s compiler=${{ matrix.config.compiler }} "
            install+="-s compiler.libcxx=libc++ "
          else
            install+="-s compiler=${{ matrix.config.compiler }} "
            install+="-s compiler.libcxx=libstdc++11 "
          fi

          if [[ ! -z "${{ matrix.config.runtime }}" ]]; then
            install+="-s compiler.runtime=${{ matrix.config.runtime }} "
          fi

          if [[ ! -z "${{ matrix.config.coverage }}" ]]; then
            install+="-o with_coverage=True "
          fi

          if [ "${{ matrix.config.arch }}" == "x86_64" ] || [ "${{ matrix.config.arch }}" == "x86_64" ]; then
            install+="-o with_tests=True "
          fi

          install+="-e CC=${{ matrix.config.cc }} "
          install+="-e CXX=${{ matrix.config.cxx }} "

          export TERM=xterm

          echo "#!/usr/bin/env bash" > ${{ env.build_script }}
          echo "" >> ${{ env.build_script }}
          echo "${install}" >> ${{ env.build_script }}

          echo "$(tput setaf 2)${install}$(tput sgr 0)"

          eval "$install"

      - name: Build
        shell: bash
        run: |
          build="conan build . --build-folder ${{ env.build_folder }}"
          echo "${build}" >> ${{ env.build_script }}
          eval "$build"

      - name: Archive the build script
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.name }}
          path: ${{ env.build_script }}

      - name: Test
        if: startsWith(matrix.config.arch, 'x86')
        working-directory: ${{ env.build_folder }}
        shell: bash
        run: |
          if [ "${{ matrix.config.compiler }}" == "clang" ] && [ "${{ matrix.config.os }}" == "windows-latest" ]; then
            export PATH=C:/msys64/mingw64/bin:$PATH
          fi

          ctest -C ${{ matrix.config.build_type }} --output-on-failure

  coverage:
    needs: build
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade conan

      - name: Download the build script
        uses: actions/download-artifact@v2
        with:
          name: 'Ubuntu GCC 10 x86 64 Debug'

      - name: Build
        run: chmod +x ${{ env.build_script }} && ./${{ env.build_script }}

      - name: Test
        run: |
          cmake --build ${{ env.build_folder }} --target coverage

      - name: Run coverage
        run: ${{ github.workspace }}/.github/coverage.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.info
          flags: unittests
          name: codecov-umbrella

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: report
